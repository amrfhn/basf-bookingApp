include:
- remote: https://gitlab.roqs.basf.net/appstore/cicd/deploy/-/raw/main/.gitlab-ci.yml
- remote: https://gitlab.roqs.basf.net/appstore/cicd/security/-/raw/main/.gitlab-ci.yml


variables:
  IMAGE_NAME: future_of_work
  DEPLOYMENT_NAME: future-of-work
  CI_REGISTRY: registry.roqs.basf.net
  PARENT_TEMPLATES: nuxt;express;postgres
  IMAGE_NAME_BACKEND_LATEST: ${CI_REGISTRY}/${CI_REGISTRY_NAMESPACE}/${IMAGE_NAME}_backend:latest
  IMAGE_NAME_BACKEND_NUMBERED: ${CI_REGISTRY}/${CI_REGISTRY_NAMESPACE}/${IMAGE_NAME}_backend:${CI_PIPELINE_ID}
  IMAGE_NAME_FRONTEND_LATEST: ${CI_REGISTRY}/${CI_REGISTRY_NAMESPACE}/${IMAGE_NAME}_frontend:latest
  IMAGE_NAME_FRONTEND_NUMBERED: ${CI_REGISTRY}/${CI_REGISTRY_NAMESPACE}/${IMAGE_NAME}_frontend:${CI_PIPELINE_ID}

stages:
- install
- test
- generate
- build
- security
- deploy
- undeploy

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
  - .npm/

# Install Stage
i-frontend-web:
  stage: install
  image: ${CI_REGISTRY}/base-images/node:latest
  script:
  - cd frontend/web
  - npm ci --cache ../../.npm --prefer-offline
  artifacts:
    expire_in: 1 day
    paths:
    - frontend/web/node_modules

i-frontend-mobile:
  stage: install
  image: ${CI_REGISTRY}/base-images/node:latest
  script:
  - cd frontend/mobile
  - npm ci --cache ../../.npm --prefer-offline
  artifacts:
    expire_in: 1 day
    paths:
    - frontend/mobile/node_modules

i-backend:
  stage: install
  image: ${CI_REGISTRY}/base-images/node:latest
  script:
  - cd backend
  - npm ci --cache ../.npm --prefer-offline
  artifacts:
    expire_in: 1 day
    paths:
    - backend/node_modules

# Test Stage
sonarqube:
  stage: test
  needs: []
  tags:
  - docker
  image: ${CI_REGISTRY}/base-images/sonar-scanner:latest
  variables:
    SONAR_EXTRA_OPTS: "-X -Dsonar.sources=. -Dsonar.java.binaries=./target/ -Dsonar.host.url=https://sonarqube.basf.net -Dsonar.login=${SONAR_TOKEN}"
  script:
  - SONAR_EXTRA_OPTS="-X ${SONAR_EXTRA_OPTS}"
  - echo sonar-scanner -X ${SONAR_EXTRA_OPTS} -Dsonar.projectKey=Future_of_Work -Dsonar.projectVersion=${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_COMMIT_SHA:0:8}
  - sonar-scanner -X ${SONAR_EXTRA_OPTS} -Dsonar.projectKey=Future_of_Work -Dsonar.projectVersion=${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_COMMIT_SHA:0:8}
  after_script:
  - echo "Browse your project on https://sonarqube.basf.net/dashboard?id=Future_of_Work"
  allow_failure: true

t-frontend-web:
  stage: test
  needs: ["i-frontend-web"]
  image: ${CI_REGISTRY}/base-images/node:latest
  script:
  - cd frontend/web
  - npm test
  artifacts:
    expire_in: 1 day
    paths:
    - frontend/web/node_modules

t-frontend-mobile:
  stage: test
  needs: ["i-frontend-mobile"]
  image: ${CI_REGISTRY}/base-images/node:latest
  script:
  - cd frontend/mobile
  - npm test
  artifacts:
    expire_in: 1 day
    paths:
    - frontend/mobile/node_modules

t-backend:
  stage: test
  needs: ["i-backend"]
  image: ${CI_REGISTRY}/base-images/node:latest
  script:
  - cd backend
  - npm test
  artifacts:
    expire_in: 1 day
    paths:
    - backend/node_modules

# Generate Stage
g-frontend-web:
  stage: generate
  needs: ["t-frontend-web"]
  image: ${CI_REGISTRY}/base-images/node:latest
  variables:
    NODE_ENV: "production"
  script:
  - cd frontend/web
  - npm version $(date '+%Y.%-m.%-d')
  - npm run generate
  artifacts:
    expire_in: 1 day
    paths:
    - frontend/web/node_modules
    - frontend/web/dist

g-frontend-mobile:
  stage: generate
  needs: ["t-frontend-mobile"]
  image: ${CI_REGISTRY}/base-images/node:latest
  variables:
    ROUTER_BASE: "/future_of_work/mobile/"
    NODE_ENV: "production"
  script:
  - cd frontend/mobile
  - npm version $(date '+%Y.%-m.%-d')
  - npm run generate
  artifacts:
    expire_in: 1 day
    paths:
    - frontend/mobile/node_modules
    - frontend/mobile/dist

# Build Stage
d-frontend:
  stage: build
  needs: ["g-frontend-web"]
  script:
  - echo "${CI_REGISTRY_TOKEN}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}
  - docker build --tag $IMAGE_NAME_FRONTEND_NUMBERED --tag $IMAGE_NAME_FRONTEND_LATEST --build-arg=VERSION="$(date '+%Y.%-m.%-d')" --file frontend.dockerfile .
  - docker push $IMAGE_NAME_FRONTEND_NUMBERED
  - docker push $IMAGE_NAME_FRONTEND_LATEST

d-backend:
  stage: build
  needs: ["t-backend", "g-frontend-mobile"]
  script:
  - echo "${CI_REGISTRY_TOKEN}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}
  - docker build --tag $IMAGE_NAME_BACKEND_NUMBERED --tag $IMAGE_NAME_BACKEND_LATEST --build-arg=VERSION="$(date '+%Y.%-m.%-d')" --file backend.dockerfile .
  - docker push $IMAGE_NAME_BACKEND_NUMBERED
  - docker push $IMAGE_NAME_BACKEND_LATEST

# Security Stage
trivy:
  stage: security
  image: registry.roqs.basf.net/base-images/trivy
  allow_failure: true
  tags:
  - docker
  script:
  - trivy@appstore
  artifacts:
    expire_in: 1 day
    paths:
    - report.json
    

egress:
  stage: security
  image: registry.roqs.basf.net/base-images/egress
  rules:
    - changes:
        - .appstore/egress.yml
      if: $CI_COMMIT_BRANCH == "development"
      if: $CI_COMMIT_BRANCH == "master"
      if: $CI_COMMIT_BRANCH =~ /^release-.*$/
      if: $CI_COMMIT_BRANCH
  allow_failure:
    # Allow failures, since the egress service should never stop a deployment.
    exit_codes: 1
  tags:
    - docker
  script:
    - egress.py
